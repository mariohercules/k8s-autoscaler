apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: strategies
data:
  strategies.s: |
    module kubow.strategies;
    import model "KubeZnnSystem:Acme" { KubeZnnSystem as M, KubernetesFam as K };
    import lib "tactics.s";

    define boolean highLatency = M.kubeZnnS.latency > M.MAX_RESPTIME;
    define boolean lowLatency = M.kubeZnnS.latency < M.MIN_RESPTIME;

    define boolean canAddPod = M.kubeZnnD.maxReplicas > M.kubeZnnD.desiredReplicas;
    define boolean canRemovePod = M.kubeZnnD.minReplicas < M.kubeZnnD.desiredReplicas;

    define boolean highMode = true;
    define boolean lowMode = false;
    define boolean textMode = false;

    strategy ReduceCost [ lowLatency && highMode ] {
      t0: (lowLatency && canRemovePod && highMode) -> removeReplicas(1) @[30000] {
        t0a: (success) -> done;
      }
      t1: (default) -> TNULL;
    }

    strategy ImproveFidelity [ lowLatency && (lowMode || textMode) ] {
      t0: (lowLatency && (textMode || lowMode)) -> raiseFidelity() @[30000] {
        t0a: (lowMode || highMode) -> done;
      }
      t1: (default) -> TNULL;
    }

    strategy ImproveReponseTime [ highLatency ] {
      t0: (highLatency && canAddPod) -> addReplicas(1) @[10000] {
        t0a: (!highLatency) -> done;
        t1: (highLatency && !canAddPod) -> lowerFidelity() @[10000]; {
          t1a: (!highLatency) -> done;
          t2: (default) -> TNULL;
        }
      }
    }
