apiVersion: v1
kind: ConfigMap
metadata:
  name: tactics
data:
  tactics.s: |
    module kubow.strategies;
    import model "KubeZnnSystem:Acme" { KubeZnnSystem as M, KubernetesFam as K };

    define boolean highMode = true;
    define boolean lowMode = false;
    define boolean textMode = false;

    tactic addReplicas(int count) {
      int replicas = M.kubeZnnD.desiredReplicas;
      condition {
        M.kubeZnnD.maxReplicas > M.kubeZnnD.desiredReplicas;
      }
      action {
        M.scaleUp(M.kubeZnnD, replicas + count);
      }
      effect @[10000] {
        (replicas' + count) == M.kubeZnnD.desiredReplicas;
      }
    }

    tactic removeReplicas(int count) {
      int replicas = M.kubeZnnD.desiredReplicas;
      condition {
        M.kubeZnnD.minReplicas < M.kubeZnnD.desiredReplicas;
      }
      action {
        M.scaleDown(M.kubeZnnD, replicas - count);
      }
      effect @[10000] {
        (replicas' - count) == M.kubeZnnD.desiredReplicas;
      }
    }

    tactic raiseFidelity() {
      condition {
        textMode || lowMode;
      }
      action {
        if (textMode) {
          M.rollOut(M.kubeZnnD, "znn", "cmendes/znn:low");
        }
        if (lowMode) {
          M.rollOut(M.kubeZnnD, "znn", "cmendes/znn:high");
        }
      }
      effect @[15000] {
        lowMode || highMode;
      }
    }

    tactic lowerFidelity() {
      condition {
        highMode || lowMode;
      }
      action {
        if (highMode) {
          M.rollOut(M.kubeZnnD, "znn", "cmendes/znn:low");
        }
        if (lowMode) {
          M.rollOut(M.kubeZnnD, "znn", "cmendes/znn:text");
        }
      }
      effect @[15000] {
        lowMode || textMode;
      }
    }
